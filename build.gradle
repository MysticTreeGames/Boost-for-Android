plugins {
    id "de.undercouch.download" version "1.2"
    id 'com.github.jlouns.cpe' version '0.1.0'
    id 'com.jfrog.bintray' version '1.1'
}

import de.undercouch.gradle.tasks.download.Download

apply from: 'common.gradle'
apply from: 'properties.gradle'
apply from: 'publishing.gradle'

task downloadBoost(type: Download) {
    src boostUrl
    dest './'
}

task unzipBoost(type: Copy) {
    from tarTree(resources.bzip2(zipFile))
    into unpackedDir
}

task copyJamExtension(type: Copy) {
    from "configs/user-config-boost-${underscoreVersion}.jam"
    into bjamExtensionDir
    rename { "user-config.jam" }
}

task bootstrapBoost(type: CrossPlatformExec) {
    outputs.file new File(boostDir.getPath(), IsWindows() ? "b2.exe" : "b2") 
    workingDir boostDir
    executable = IsWindows() ? "bootstrap.bat" : "./bootstrap.sh"
}

task patchForAndroid << {
    ant.patch(patchfile: "patches/boost-${underscoreVersion}/boost-${underscoreVersion}.patch", dir: boostDir, strip: 1)
}

// Generate tasks for each toolchain
logger.info("Generating tasks for this list of toolchains: $ndk_toolchains")
ndk_toolchains.each { toolchain ->
    task "$toolchain-Build" (type: CrossPlatformExec, dependsOn: [bootstrapBoost, copyJamExtension, patchForAndroid]) {
        // TODO: with this code still only one toolchain is supported: armeabi 
        String ndkToolsetRoot = new File(androidNDK, "toolchains/$toolchain-$ndk_toolchain_compiler_version/prebuilt/$getOSName-x86_64/bin/")

        environment "AndroidToolchainPrefix", toolchain
        environment "AndroidBinariesPath", ndkToolsetRoot
        environment "AndroidNDKCompilerVersion", ndk_toolchain_compiler_version
        environment "PATH", AddToSystemPath(ndkToolsetRoot)
        environment "AndroidNDKRoot", androidNDK
        environment "AndroidNDKApiLevel", ndkApiLevel
        environment "NO_BZIP2", "1"

        workingDir boostDir
        executable = IsWindows() ? "bjam.exe" : "./bjam"
        args = ["target-os=linux",
             "link=static",
             "threading=multi",
             "--layout=versioned",
             "--stagedir=./../BUILD_$underscoreVersion/$toolchain", //TODO: use boostBuildDir
             "--build-dir=./../BUILD_$underscoreVersion/$toolchain/obj",
             // TODO: fix that
             // "-sICONV_PATH=`pwd`/../libiconv-libicu-android/armeabi",
             // "-sICU_PATH=`pwd`/../libiconv-libicu-android/armeabi",
             // "--prefix=./../BUILD_$underscoreVersion/$toolchain",
             ] + libsToBuild
    }
}

task getBoost(dependsOn: [downloadBoost, unzipBoost])
task buildBoost(dependsOn: ndk_toolchains.collect { toolchain -> "$toolchain-Build" } )

task buildBoostNative(type: CrossPlatformExec, dependsOn: [bootstrapBoost, patchForAndroid]) {
    workingDir boostDir
    executable = IsWindows() ? "bjam.exe" : "./bjam"
    args = ["toolset=$nativeToochain",
         "link=static",
         "threading=multi",
         "--layout=versioned",
         "--stagedir=./../BUILD_$underscoreVersion/$nativeToochain",
         "--build-dir=./../BUILD_$underscoreVersion/$nativeToochain/obj",
         ] + libsToBuild
}

// Following tasks requires to be clean of user-config.jam
bootstrapBoost.doFirst { delete new File(bjamExtensionDir.getPath(), "user-config.jam") }
buildBoostNative.doFirst { delete new File(bjamExtensionDir.getPath(), "user-config.jam") }
